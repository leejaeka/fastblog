{
  
    
        "post0": {
            "title": "Title",
            "content": "import os key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;Key omitted for security&#39;) . reptile_types = &#39;crocodile&#39;,&#39;alligator&#39;,&#39;caiman&#39; path = Path(&#39;reptiles&#39;) . # path.mkdir() # for o in reptile_types: # dest = (path/o) # dest.mkdir(exist_ok=True) # results = search_images_bing(key, f&#39;{o}&#39;) # download_images(dest, urls=results.attrgot(&#39;content_url&#39;)) . . 73.33% [110/150 00:32&lt;00:11] fns = get_image_files(path) fns . (#444) [Path(&#39;reptiles/alligator/00000000.jpg&#39;),Path(&#39;reptiles/alligator/00000001.jpg&#39;),Path(&#39;reptiles/alligator/00000002.jpg&#39;),Path(&#39;reptiles/alligator/00000003.jpg&#39;),Path(&#39;reptiles/alligator/00000004.jpg&#39;),Path(&#39;reptiles/alligator/00000005.jpg&#39;),Path(&#39;reptiles/alligator/00000006.jpg&#39;),Path(&#39;reptiles/alligator/00000007.jpg&#39;),Path(&#39;reptiles/alligator/00000008.jpg&#39;),Path(&#39;reptiles/alligator/00000009.jpg&#39;)...] . failed = verify_images(fns) failed . (#7) [Path(&#39;reptiles/alligator/00000002.jpg&#39;),Path(&#39;reptiles/caiman/00000021.jpg&#39;),Path(&#39;reptiles/caiman/00000071.jpg&#39;),Path(&#39;reptiles/caiman/00000115.JPG&#39;),Path(&#39;reptiles/crocodile/00000017.jpg&#39;),Path(&#39;reptiles/crocodile/00000036.jpg&#39;),Path(&#39;reptiles/crocodile/00000089.jpg&#39;)] . failed.map(Path.unlink) . (#7) [None,None,None,None,None,None,None] . class DataLoaders(GetAttr): num_workers=0 def __init__(self, *loaders): self.loaders = loaders def __getitem__(self, i): return self.loaders[i] train,valid = add_props(lambda i, self: self[i]) . reptiles = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = reptiles.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . reptiles = reptiles.new(item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = reptiles.dataloaders(path, num_workers=0) # &lt;- num_workers=0 to prevent window error . dls.train.show_batch(max_n=8,nrows=2,unique=True) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.970919 | 1.043408 | 0.436782 | 00:26 | . D: anaconda3 lib site-packages PIL Image.py:960: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images warnings.warn( . epoch train_loss valid_loss error_rate time . 0 | 1.344288 | 0.993782 | 0.413793 | 00:25 | . 1 | 1.237567 | 1.008499 | 0.402299 | 00:25 | . 2 | 1.032747 | 0.994638 | 0.333333 | 00:25 | . 3 | 0.935045 | 0.998598 | 0.321839 | 00:25 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(3,nrows=2) . cleaner = ImageClassifierCleaner(learn) cleaner . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-61-1df86057f98d&gt; in &lt;module&gt; -&gt; 1 cleaner = ImageClassifierCleaner(learn) 2 cleaner D: anaconda3 lib site-packages fastai vision widgets.py in __init__(self, learn, **kwargs) 79 self.dd_cats = Dropdown(options=vocab) 80 self.dd_ds = Dropdown(options=(&#39;Train&#39;,&#39;Valid&#39;)) &gt; 81 self.iwis = _get_iw_info(learn,0),_get_iw_info(learn,1) 82 self.dd_ds.observe(self.on_change_ds, &#39;value&#39;) 83 self.dd_cats.observe(self.on_change_ds, &#39;value&#39;) D: anaconda3 lib site-packages fastai vision widgets.py in _get_iw_info(learn, ds_idx) 66 def _get_iw_info(learn, ds_idx=0): 67 dl = learn.dls[ds_idx].new(shuffle=False, drop_last=False) &gt; 68 inp,probs,targs,preds,losses = learn.get_preds(dl=dl, with_input=True, with_loss=True, with_decoded=True) 69 inp,targs = L(zip(*dl.decode_batch((inp,targs), max_n=9999))) 70 return L([dl.dataset.items,targs,losses]).zip() D: anaconda3 lib site-packages fastai learner.py in get_preds(self, ds_idx, dl, with_input, with_decoded, with_loss, act, inner, reorder, cbs, **kwargs) 233 if with_loss: ctx_mgrs.append(self.loss_not_reduced()) 234 with ContextManagers(ctx_mgrs): --&gt; 235 self._do_epoch_validate(dl=dl) 236 if act is None: act = getattr(self.loss_func, &#39;activation&#39;, noop) 237 res = cb.all_tensors() D: anaconda3 lib site-packages fastai learner.py in _do_epoch_validate(self, ds_idx, dl) 186 if dl is None: dl = self.dls[ds_idx] 187 self.dl = dl --&gt; 188 with torch.no_grad(): self._with_events(self.all_batches, &#39;validate&#39;, CancelValidException) 189 190 def _do_epoch(self): D: anaconda3 lib site-packages fastai learner.py in _with_events(self, f, event_type, ex, final) 153 154 def _with_events(self, f, event_type, ex, final=noop): --&gt; 155 try: self(f&#39;before_{event_type}&#39;) ;f() 156 except ex: self(f&#39;after_cancel_{event_type}&#39;) 157 finally: self(f&#39;after_{event_type}&#39;) ;final() D: anaconda3 lib site-packages fastai learner.py in all_batches(self) 159 def all_batches(self): 160 self.n_iter = len(self.dl) --&gt; 161 for o in enumerate(self.dl): self.one_batch(*o) 162 163 def _do_one_batch(self): D: anaconda3 lib site-packages fastai data load.py in __iter__(self) 100 self.before_iter() 101 self.__idxs=self.get_idxs() # called in context of main process (not workers/subprocesses) --&gt; 102 for b in _loaders[self.fake_l.num_workers==0](self.fake_l): 103 if self.device is not None: b = to_device(b, self.device) 104 yield self.after_batch(b) D: anaconda3 lib site-packages torch utils data dataloader.py in __next__(self) 361 362 def __next__(self): --&gt; 363 data = self._next_data() 364 self._num_yielded += 1 365 if self._dataset_kind == _DatasetKind.Iterable and D: anaconda3 lib site-packages torch utils data dataloader.py in _next_data(self) 401 def _next_data(self): 402 index = self._next_index() # may raise StopIteration --&gt; 403 data = self._dataset_fetcher.fetch(index) # may raise StopIteration 404 if self._pin_memory: 405 data = _utils.pin_memory.pin_memory(data) D: anaconda3 lib site-packages torch utils data _utils fetch.py in fetch(self, possibly_batched_index) 32 raise StopIteration 33 else: &gt; 34 data = next(self.dataset_iter) 35 return self.collate_fn(data) 36 D: anaconda3 lib site-packages fastai data load.py in create_batches(self, samps) 109 self.it = iter(self.dataset) if self.dataset is not None else None 110 res = filter(lambda o:o is not None, map(self.do_item, samps)) --&gt; 111 yield from map(self.do_batch, self.chunkify(res)) 112 113 def new(self, dataset=None, cls=None, **kwargs): D: anaconda3 lib site-packages fastcore utils.py in chunked(it, chunk_sz, drop_last, n_chunks) 164 if not isinstance(it, Iterator): it = iter(it) 165 while True: --&gt; 166 res = list(itertools.islice(it, chunk_sz)) 167 if res and (len(res)==chunk_sz or not drop_last): yield res 168 if len(res)&lt;chunk_sz: return D: anaconda3 lib site-packages fastai data load.py in do_item(self, s) 122 def prebatched(self): return self.bs is None 123 def do_item(self, s): --&gt; 124 try: return self.after_item(self.create_item(s)) 125 except SkipItemException: return None 126 def chunkify(self, b): return b if self.prebatched else chunked(b, self.bs, self.drop_last) D: anaconda3 lib site-packages fastai data load.py in create_item(self, s) 128 def randomize(self): self.rng = random.Random(self.rng.randint(0,2**32-1)) 129 def retain(self, res, b): return retain_types(res, b[0] if is_listy(b) else b) --&gt; 130 def create_item(self, s): return next(self.it) if s is None else self.dataset[s] 131 def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b) 132 def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b) D: anaconda3 lib site-packages fastai data core.py in __getitem__(self, it) 312 313 def __getitem__(self, it): --&gt; 314 res = tuple([tl[it] for tl in self.tls]) 315 return res if is_indexer(it) else list(zip(*res)) 316 D: anaconda3 lib site-packages fastai data core.py in &lt;listcomp&gt;(.0) 312 313 def __getitem__(self, it): --&gt; 314 res = tuple([tl[it] for tl in self.tls]) 315 return res if is_indexer(it) else list(zip(*res)) 316 D: anaconda3 lib site-packages fastai data core.py in __getitem__(self, idx) 278 res = super().__getitem__(idx) 279 if self._after_item is None: return res --&gt; 280 return self._after_item(res) if is_indexer(idx) else res.map(self._after_item) 281 282 # Cell D: anaconda3 lib site-packages fastai data core.py in _after_item(self, o) 240 return super()._new(items, tfms=self.tfms, do_setup=False, types=self.types, split_idx=split_idx, **kwargs) 241 def subset(self, i): return self._new(self._get(self.splits[i]), split_idx=i) --&gt; 242 def _after_item(self, o): return self.tfms(o) 243 def __repr__(self): return f&#34;{self.__class__.__name__}: {self.items} ntfms - {self.tfms.fs}&#34; 244 def __iter__(self): return (self[i] for i in range(len(self))) D: anaconda3 lib site-packages fastcore transform.py in __call__(self, o) 196 self.fs.append(t) 197 --&gt; 198 def __call__(self, o): return compose_tfms(o, tfms=self.fs, split_idx=self.split_idx) 199 def __repr__(self): return f&#34;Pipeline: {&#39; -&gt; &#39;.join([f.name for f in self.fs if f.name != &#39;noop&#39;])}&#34; 200 def __getitem__(self,i): return self.fs[i] D: anaconda3 lib site-packages fastcore transform.py in compose_tfms(x, tfms, is_enc, reverse, **kwargs) 148 for f in tfms: 149 if not is_enc: f = f.decode --&gt; 150 x = f(x, **kwargs) 151 return x 152 D: anaconda3 lib site-packages fastcore transform.py in __call__(self, x, **kwargs) 71 @property 72 def name(self): return getattr(self, &#39;_name&#39;, _get_name(self)) &gt; 73 def __call__(self, x, **kwargs): return self._call(&#39;encodes&#39;, x, **kwargs) 74 def decode (self, x, **kwargs): return self._call(&#39;decodes&#39;, x, **kwargs) 75 def __repr__(self): return f&#39;{self.name}: nencodes: {self.encodes}decodes: {self.decodes}&#39; D: anaconda3 lib site-packages fastcore transform.py in _call(self, fn, x, split_idx, **kwargs) 81 def _call(self, fn, x, split_idx=None, **kwargs): 82 if split_idx!=self.split_idx and self.split_idx is not None: return x &gt; 83 return self._do_call(getattr(self, fn), x, **kwargs) 84 85 def _do_call(self, f, x, **kwargs): D: anaconda3 lib site-packages fastcore transform.py in _do_call(self, f, x, **kwargs) 87 if f is None: return x 88 ret = f.returns_none(x) if hasattr(f,&#39;returns_none&#39;) else None &gt; 89 return retain_type(f(x, **kwargs), x, ret) 90 res = tuple(self._do_call(f, x_, **kwargs) for x_ in x) 91 return retain_type(res, x) D: anaconda3 lib site-packages fastcore dispatch.py in __call__(self, *args, **kwargs) 127 elif self.inst is not None: f = MethodType(f, self.inst) 128 elif self.owner is not None: f = MethodType(f, self.owner) --&gt; 129 return f(*args, **kwargs) 130 131 def __get__(self, inst, owner): D: anaconda3 lib site-packages fastai vision core.py in create(cls, fn, **kwargs) 108 if isinstance(fn,ndarray): return cls(Image.fromarray(fn)) 109 if isinstance(fn,bytes): fn = io.BytesIO(fn) --&gt; 110 return cls(load_image(fn, **merge(cls._open_args, kwargs))) 111 112 def show(self, ctx=None, **kwargs): D: anaconda3 lib site-packages fastai vision core.py in load_image(fn, mode) 83 def load_image(fn, mode=None): 84 &#34;Open and load a `PIL.Image` and convert to `mode`&#34; &gt; 85 im = Image.open(fn) 86 im.load() 87 im = im._new(im.im) D: anaconda3 lib site-packages PIL Image.py in open(fp, mode) 2876 2877 if filename: -&gt; 2878 fp = builtins.open(filename, &#34;rb&#34;) 2879 exclusive_fp = True 2880 FileNotFoundError: [Errno 2] No such file or directory: &#39;D: Project Reptile Detector Croc-Alligator-Caiman-Detector reptiles alligator 00000099.jpg&#39; . for idx in cleaner.delete(): cleaner.fns[idx].unlink() # delete . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-59-d0ac79185ce3&gt; in &lt;module&gt; -&gt; 1 for idx in cleaner.delete(): cleaner.fns[idx].unlink() # delete D: anaconda3 lib pathlib.py in unlink(self, missing_ok) 1319 self._raise_closed() 1320 try: -&gt; 1321 self._accessor.unlink(self) 1322 except FileNotFoundError: 1323 if not missing_ok: FileNotFoundError: [WinError 2] The system cannot find the file specified: &#39;reptiles crocodile 00000102.jpg&#39; . for idx, cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . reptiles = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . reptiles = reptiles.new(item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = reptiles.dataloaders(path, num_workers=0) # &lt;- num_workers=0 to prevent window error . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.024061 | 1.739658 | 0.593023 | 00:23 | . epoch train_loss valid_loss error_rate time . 0 | 1.284611 | 1.220839 | 0.500000 | 00:23 | . 1 | 1.172451 | 1.031749 | 0.348837 | 00:24 | . 2 | 1.023675 | 1.042305 | 0.313953 | 00:24 | . 3 | 0.893127 | 1.034520 | 0.325581 | 00:24 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . A little bit better! But still horrible! . Conclusion . I am not a reptile expert so I cannot tell the difference alligators and crocodiles unless their snouts are clearly shown from top-down view.. Implying that I cannot clean up the messy data efficiently. One solution is to gather more and better data but I&#39;m not that interested in this topic anymore so I will stop here. Honestly, I&#39;m surprised the CNN was able to somewhat tell with the given datas. .",
            "url": "https://leejaeka.github.io/fastblog/2020/10/27/reptile.html",
            "relUrl": "/2020/10/27/reptile.html",
            "date": " • Oct 27, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leejaeka.github.io/fastblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leejaeka.github.io/fastblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Yes it is I! .",
          "url": "https://leejaeka.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leejaeka.github.io/fastblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}